// Reclassify from 0-3 to 1-4
var beforeClasses = beforeClasses.remap([0, 1], [1, 2]);
var afterClasses = afterClasses.remap([0, 1], [1, 2]);

// Show all changed areas
var changed = afterClasses.subtract(beforeClasses).neq(0);
Map.addLayer(changed.clip(geometry), {min:0, max:1, palette: ['white', 'red']}, 'Change');

// We multiply the before image with 100 and add the after image
// The resulting pixel values will be unique and will represent each unique transition
// i.e. 102 is urban to bare, 103 urban to water etc.
var merged = beforeClasses.multiply(100).add(afterClasses).rename('transitions');

// Use a frequencyHistogram to get a pixel count per class
var transitionMatrix = merged.reduceRegion({
  reducer: ee.Reducer.frequencyHistogram(), 
  geometry: geometry,
  maxPixels: 1e10,
  scale:30,
  tileScale: 16
});
// This prints number of pixels for each class transition
print(transitionMatrix.get('transitions'));

// If we want to calculate the area of each class transition
// we can use a grouped reducer

// Divide by 1e6 to get the area in sq.km.
var areaImage = ee.Image.pixelArea().divide(1e4).addBands(merged);
// Calculate Area by each Transition Class
// using a Grouped Reducer
var areas = areaImage.reduceRegion({
      reducer: ee.Reducer.sum().group({
      groupField: 1,
      groupName: 'transitions',
    }),
    geometry: geometry,
    scale: 30,
    tileScale: 4,
    maxPixels: 1e10
    }); 

// Post-process the result to generate a clean output
var classAreas = ee.List(areas.get('groups'));
var classAreaLists = classAreas.map(function(item) {
      var areaDict = ee.Dictionary(item);
      var classNumber = ee.Number(areaDict.get('transitions')).format();
      var area = ee.Number(areaDict.get('sum')).round();
      return ee.List([classNumber, area]);
    });
var classTransitionsAreaDict = ee.Dictionary(classAreaLists.flatten());
print(classTransitionsAreaDict);


// Define colors for specific transitions
var forestToforest = merged.eq(101).selfMask().visualize({palette: 'white'});    // Urban to Bare
var forestTonoforest = merged.eq(102).selfMask().visualize({palette: 'red'});   // Urban to Water
var noforestToforest = merged.eq(201).selfMask().visualize({palette: 'blue'});   // Bare to Urban
var noforestTonoforest = merged.eq(202).selfMask().visualize({palette: 'white'});   // Bare to Bare (No change)

// Combine all transition layers into a single composite using blend()
var transitionComposite = ee.ImageCollection([
  forestToforest, forestTonoforest, noforestToforest, noforestTonoforest
]).mosaic();  // mosaic() merges them, giving each transition a unique color

// Add the composite layer to the map
Map.addLayer(transitionComposite.clip(geometry), {}, 'Transition Classes');
Export.image.toDrive({
    image: changed,
    description: 'merged',
    folder: 'earthengine',
    fileNamePrefix: 'merged',
    region: geometry,
    scale: 30,
    maxPixels: 1e9
});
Export.image.toDrive({
    image: transitionComposite,
    description: 'transition90_95',
    folder: 'earthengine',
    fileNamePrefix: 'transition90_95',
    region: geometry,
    scale: 30,
    maxPixels: 1e9
});
/////////////////////////////////////////////////////////////


var s2 = ee.ImageCollection('COPERNICUS/S2_HARMONIZED');

/*var geometry = ee.Geometry.Polygon([[
  [82.60642647743225, 27.16350437805251],
  [82.60984897613525, 27.1618529901377],
  [82.61088967323303, 27.163695288375266],
  [82.60757446289062, 27.16517483230927]
]]);*/
Map.addLayer(geometry1, {color: 'red'}, 'Farm');
Map.centerObject(geometry1);

var filtered = s2
  .filter(ee.Filter.date('2015-01-01', '2021-01-01'))
  .filter(ee.Filter.bounds(geometry1));

// Load the Cloud Score+ collection
var csPlus = ee.ImageCollection('GOOGLE/CLOUD_SCORE_PLUS/V1/S2_HARMONIZED');
var csPlusBands = csPlus.first().bandNames();

// We need to add Cloud Score + bands to each Sentinel-2
// image in the collection
// This is done using the linkCollection() function
var filteredS2WithCs = filtered.linkCollection(csPlus, csPlusBands);

// Function to mask pixels with low CS+ QA scores.
function maskLowQA(image) {
  var qaBand = 'cs';
  var clearThreshold = 0.5;
  var mask = image.select(qaBand).gte(clearThreshold);
  return image.updateMask(mask);
}


var filteredMasked = filteredS2WithCs
  .map(maskLowQA);
  
// Write a function that computes NDVI for an image and adds it as a band
function addNDVI(image) {
  var ndvi = image.normalizedDifference(['B8', 'B4']).rename('ndvi');
  return image.addBands(ndvi);
}

// Map the function over the collection
var withNdvi = filteredMasked.map(addNDVI);


// Display a time-series chart
var chart = ui.Chart.image.series({
  imageCollection: withNdvi.select('ndvi'),
  region: geometry1,
  reducer: ee.Reducer.mean(),
  scale: 10
}).setOptions({
      lineWidth: 1,
      pointSize: 2,
      title: 'NDVI Time Series',
      interpolateNulls: true,
      vAxis: {title: 'NDVI'},
      hAxis: {title: '', format: 'YYYY-MMM'}
    });
    
print(chart);



//////////////////////////////////////////////////////////////////////////////

var legend = ui.Panel({style: {position: 'middle-right', padding: '8px 15px'}});

var makeRow = function(color, name) {
  var colorBox = ui.Label({
    style: {color: '#ffffff',
      backgroundColor: color,
      padding: '10px',
      margin: '0 0 4px 0',
    }
  });
  var description = ui.Label({
    value: name,
    style: {
      margin: '0px 0 4px 6px',
    }
  }); 
  return ui.Panel({
    widgets: [colorBox, description],
    layout: ui.Panel.Layout.Flow('horizontal')}
)};

var title = ui.Label({
  value: 'Legend',
  style: {fontWeight: 'bold',
    fontSize: '16px',
    margin: '0px 0 4px 0px'}});
    
legend.add(title);
legend.add(makeRow('blue','gain'))
legend.add(makeRow('red','loss'))


Map.add(legend);


